C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE NORMAL_TASK
OBJECT MODULE PLACED IN ..\OBJ\Normal_Task.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\CODE\Normal_Task.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE ORDER N
                    -OAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\HARDWARE\sh
                    -t31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\Normal_Task.lst) TABS(2) OBJE
                    -CT(..\OBJ\Normal_Task.obj)

line level    source

   1          #include "all.h"
   2          
   3          //2019.03.30
   4          sbit P20 = 0xA0^0;
   5          sbit P21 = 0xA0^1;
   6          sbit P22 = 0xA0^2;
   7          sbit P23 = 0xA0^3;
   8          
   9          WORK_STATUS Work_State = UI_STATE_POWER_OFF_MODE;//工作状态定义
  10          
  11          void ManageTask(void)//Task0:Task Manager ----20mS
  12          {
  13   1          static unsigned char Manage_Tik_100mS_Cnt = 0;
  14   1          static unsigned char Manage_Tik_250mS_Cnt = 0;
  15   1          static unsigned char Manage_Tik_1000mS_Cnt = 0;        
  16   1                   
  17   1          WS_TaskState = ManageTIFG;
  18   1          if(WS_TaskJudge(WS_TaskState))   
  19   1          { 
  20   2              WS_DelTaskIfg(WS_TaskState); 
  21   2              {         
  22   3                //20mS任务
  23   3                WS_SetTaskIfg(KeyScanTIFG);//按键扫描任务 20mS          
  24   3                WS_SetTaskIfg(UartRecTIFG);//串口接收进程
  25   3                
  26   3                if(Work_State != UI_STATE_DATAREADER_MODE)//数据传输界面屏蔽以下任务
  27   3                {         
  28   4                  if(Work_State != UI_STATE_POWER_OFF_MODE)
  29   4                  {         
  30   5                    WS_SetTaskIfg(GetTemp_HpChamberTIFG);      //读取加热盘盘和出气口的温度 20mS
  31   5                    WS_SetTaskIfg(GetTempHumidity_PatientTIFG); //读取患者端温度和温度 20mS
  32   5                  }         
  33   4                  //100mS任务
  34   4                  Manage_Tik_100mS_Cnt++;
  35   4                  if(Manage_Tik_100mS_Cnt >= 5)//
  36   4                  {
  37   5                    Manage_Tik_100mS_Cnt = 0;
  38   5        //            time_test_lcd_backlight();
  39   5                    if(Work_State == UI_STATE_SERVICE_MODE)
  40   5                    {         
  41   6                      WS_SetTaskIfg(HmiServiceModeTIFG);//服务模式
  42   6                    }
  43   5                    else if(Work_State == UI_STATE_POST_MODE)
  44   5                    {
  45   6                      WS_SetTaskIfg(HmiPostTIFG);//开机自检
  46   6                    }         
  47   5                    else if(Work_State == UI_STATE_FACTORY_DEFAULT_SEL_MODE)
  48   5                    {
  49   6                      WS_SetTaskIfg(HmiFactoryDefaultSelTIFG);//开机选择功能
  50   6                    }
  51   5                    else if(Work_State == UI_STATE_NON_INVASIVE_MODE)
  52   5                    {
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 2   

  53   6                      WS_SetTaskIfg(HmiNon_InvasiveSelTIFG);//开机有创无创选择
  54   6                    }
  55   5                    else if(Work_State == UI_STATE_RUNNING_NORMAL_MODE)
  56   5                    {
  57   6                      WS_SetTaskIfg(HmiRunningTIFG);//正常运行状态
  58   6                    }
  59   5                    else if(Work_State == UI_STATE_SetTempPatient_MODE)
  60   5                    {
  61   6                      WS_SetTaskIfg(HmiSetTempPatientTIFG);//患者端温度设定
  62   6                    }
  63   5                    else if(Work_State == UI_STATE_SetTempChamber_MODE)
  64   5                    {
  65   6                      WS_SetTaskIfg(HmiSetTempChamberTIFG);//出气口温度设定
  66   6                    }
  67   5                    else if(Work_State == UI_STATE_SetInExp_MODE)
  68   5                    {
  69   6                      WS_SetTaskIfg(HmiSetInExpTIFG);//InExp设定
  70   6                    }
  71   5                    else if(Work_State == UI_STATE_SetTime_MODE)
  72   5                    {
  73   6                      WS_SetTaskIfg(HmiSetTimeTIFG);//时间设定
  74   6                    }     
  75   5                    
  76   5                    if((Work_State != UI_STATE_POWER_OFF_MODE)
  77   5                      &&(Work_State != UI_STATE_POST_MODE)
  78   5                      &&(Work_State != UI_STATE_FACTORY_DEFAULT_SEL_MODE)
  79   5                      &&(Work_State != UI_STATE_NON_INVASIVE_MODE)  
  80   5                      &&(Work_State != UI_STATE_SERVICE_MODE))//除以上模式外          
  81   5                    {
  82   6                      WS_SetTaskIfg(HmiScreenSaverModeTIFG);//屏保模式 
  83   6                    }
  84   5                    
  85   5                    if((Work_State == UI_STATE_RUNNING_NORMAL_MODE)
  86   5                      ||(Work_State == UI_STATE_SetTempPatient_MODE)
  87   5                      ||(Work_State == UI_STATE_SetTempChamber_MODE)
  88   5                      ||(Work_State == UI_STATE_SetInExp_MODE)
  89   5                      ||(Work_State == UI_STATE_SetTime_MODE))
  90   5                    { 
  91   6                      if((Work_State != UI_STATE_SetTime_MODE)//设定时间时不刷新实时RTC时间 
  92   6                        &&(Work_State != UI_STATE_SCREENSAVER_MODE))
  93   6                      {
  94   7                        WS_SetTaskIfg(RefreshRTCTimeTIFG);//刷新RTC时间     
  95   7                      }               
  96   6                    }
  97   5                  }
  98   4                  
  99   4                  //240mS任务
 100   4                  Manage_Tik_250mS_Cnt++;
 101   4                  if(Manage_Tik_250mS_Cnt >= 12)//
 102   4                  {
 103   5                    Manage_Tik_250mS_Cnt = 0;
 104   5                    if((Work_State == UI_STATE_RUNNING_NORMAL_MODE)
 105   5                      ||(Work_State == UI_STATE_SetInExp_MODE)
 106   5                      ||(Work_State == UI_STATE_SetTime_MODE))
 107   5                    {
 108   6                      if((Work_State != UI_STATE_SetTempPatient_MODE)
 109   6                        &&(Work_State != UI_STATE_SetTempChamber_MODE))
 110   6                      {   
 111   7                        WS_SetTaskIfg(RefreshTempHumidyTIFG);//刷新实时温度和湿度
 112   7                      }
 113   6                    }
 114   5                    
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 3   

 115   5                    if((Work_State != UI_STATE_POWER_OFF_MODE)
 116   5                      &&(Work_State != UI_STATE_POST_MODE)
 117   5                      &&(Work_State != UI_STATE_FACTORY_DEFAULT_SEL_MODE)
 118   5                      &&(Work_State != UI_STATE_NON_INVASIVE_MODE)
 119   5                      &&(Work_State != UI_STATE_SERVICE_MODE))//除以上模式外                  
 120   5                    {
 121   6                      WS_SetTaskIfg(AlarmErrorTIFG);//报警和错误事件处理,错误事件刷新 
 122   6                    }
 123   5                  }
 124   4                            
 125   4                  //1000mS任务
 126   4                  Manage_Tik_1000mS_Cnt++;
 127   4                  if(Manage_Tik_1000mS_Cnt >= 50)//
 128   4                  {
 129   5                    Manage_Tik_1000mS_Cnt = 0;
 130   5                    if((Work_State == UI_STATE_RUNNING_NORMAL_MODE)
 131   5                      ||(Work_State == UI_STATE_SCREENSAVER_MODE)
 132   5                      ||(Work_State == UI_STATE_SetTempPatient_MODE)
 133   5                      ||(Work_State == UI_STATE_SetTempChamber_MODE)
 134   5                      ||(Work_State == UI_STATE_SetInExp_MODE)
 135   5                      ||(Work_State == UI_STATE_SetTime_MODE))
 136   5                    {             
 137   6                      WS_SetTaskIfg(HeaterWireModeDetTIFG); //加热线状态检测 1S
 138   6                      WS_SetTaskIfg(HeaterPlateWireControlTIFG);//回路加热线温度的控制 1S(仅运算，驱动在定时中断)
 139   6                      WS_SetTaskIfg(LowPowerModeTIFG);//低功率模式 1S
 140   6                      WS_SetTaskIfg(SaveDateToFlashTIFG);//保存数据到FLASH 1S 
 141   6                      WS_SetTaskIfg(LowTempDet1STIFG);//低温低湿检测1S
 142   6                      WS_SetTaskIfg(RefreshRunTimeTIFG);//刷新运行时间 1S
 143   6                    }             
 144   5                  }         
 145   4                } 
 146   3              }          
 147   2          }
 148   1      }
 149          
 150          KEY_STATUS KeyToFuncVal = KEY_STATE_ReleaseValue; 
 151          void KeyScanTask(void) //1
 152          {
 153   1          BitStatus bit_status;
 154   1          WS_TaskState = KeyScanTIFG;
 155   1          if(WS_TaskJudge(WS_TaskState))
 156   1          {   
 157   2              WS_DelTaskIfg(WS_TaskState);
 158   2              {
 159   3                bit_status = KEY_LEFT_UP_IN;//UP
 160   3                if(bit_status == RESET)
 161   3                {
 162   4                  KeyToFuncVal = KEY_STATE_PressValue;     
 163   4                }
 164   3                else
 165   3                  KeyToFuncVal = KEY_STATE_ReleaseValue; 
 166   3                Key_Multifun(Key_UP_Element,&Key_UP);
 167   3                
 168   3                bit_status = KEY_LEFT_DOWN_IN;//DOWN
 169   3                if(bit_status == RESET)
 170   3                {
 171   4                  KeyToFuncVal = KEY_STATE_PressValue;     
 172   4                }
 173   3                else
 174   3                  KeyToFuncVal = KEY_STATE_ReleaseValue; 
 175   3                Key_Multifun(Key_Down_Element,&Key_Down);
 176   3                
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 4   

 177   3                bit_status = KEY_RIGHT_UP_IN;//OK
 178   3                if(bit_status == RESET)
 179   3                {
 180   4                  KeyToFuncVal = KEY_STATE_PressValue;     
 181   4                }
 182   3                else
 183   3                  KeyToFuncVal = KEY_STATE_ReleaseValue; 
 184   3                Key_Multifun(Key_OK_Element,&Key_OK);
 185   3                
 186   3                bit_status = KEY_RIGHT_DOWN_IN;//MUTE
 187   3                if(bit_status == RESET)
 188   3                {
 189   4                  KeyToFuncVal = KEY_STATE_PressValue;        
 190   4                }
 191   3                else
 192   3                  KeyToFuncVal = KEY_STATE_ReleaseValue; 
 193   3                Key_Multifun(Key_Mute_Element,&Key_Mute);         
 194   3              }
 195   2          }
 196   1      }
 197          
 198          void HmiServiceModeTask(void)//2
 199          {
 200   1        WS_TaskState = HmiServiceModeTIFG;
 201   1        if(WS_TaskJudge(WS_TaskState))
 202   1        {   
 203   2          WS_DelTaskIfg(WS_TaskState);
 204   2          {
 205   3            HmiServiceModeFunc();
 206   3          }
 207   2        }
 208   1      }
 209          
 210          void HmiPostTask(void)//3
 211          {
 212   1        WS_TaskState = HmiPostTIFG;
 213   1        if(WS_TaskJudge(WS_TaskState))
 214   1        {   
 215   2          WS_DelTaskIfg(WS_TaskState);
 216   2          {
 217   3            HmiPostFunc();
 218   3          }
 219   2        }
 220   1      }
 221          
 222          void HmiFactoryDefaultSelTask(void)//4
 223          {
 224   1        WS_TaskState = HmiFactoryDefaultSelTIFG;
 225   1        if(WS_TaskJudge(WS_TaskState))
 226   1        {   
 227   2          WS_DelTaskIfg(WS_TaskState);
 228   2          {
 229   3            HmiFactoryDefaultFunc();
 230   3      //      time_test_lcd_backlight();
 231   3          }
 232   2        }
 233   1      }
 234          
 235          void HmiNon_InvasiveSelTask(void)//5
 236          {
 237   1        WS_TaskState = HmiNon_InvasiveSelTIFG;
 238   1        if(WS_TaskJudge(WS_TaskState))
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 5   

 239   1        {   
 240   2          WS_DelTaskIfg(WS_TaskState);
 241   2          {
 242   3            HmiNon_InvasiveSelFunc();
 243   3          }
 244   2        } 
 245   1      }
 246          
 247          void HmiRunningTask(void)//6
 248          {
 249   1        WS_TaskState = HmiRunningTIFG;
 250   1        if(WS_TaskJudge(WS_TaskState))
 251   1        {   
 252   2          WS_DelTaskIfg(WS_TaskState);
 253   2          {
 254   3            HmiRunningFunc();
 255   3          }
 256   2        }   
 257   1      }
 258          
 259          void HmiSetTempPatientTask(void)//7
 260          {
 261   1        WS_TaskState = HmiSetTempPatientTIFG;
 262   1        if(WS_TaskJudge(WS_TaskState))
 263   1        {   
 264   2          WS_DelTaskIfg(WS_TaskState);
 265   2          {
 266   3            HmiSetTempPatientFunc();
 267   3          }
 268   2        } 
 269   1      }
 270          
 271          void HmiSetTempChamberTask(void)//8
 272          {
 273   1        WS_TaskState = HmiSetTempChamberTIFG;
 274   1        if(WS_TaskJudge(WS_TaskState))
 275   1        {   
 276   2          WS_DelTaskIfg(WS_TaskState);
 277   2          {
 278   3            HmiSetTempChamberFunc();
 279   3          }
 280   2        } 
 281   1      } 
 282          
 283          void HmiSetInExpTask(void)//9
 284          {
 285   1        WS_TaskState = HmiSetInExpTIFG;
 286   1        if(WS_TaskJudge(WS_TaskState))
 287   1        {   
 288   2          WS_DelTaskIfg(WS_TaskState);
 289   2          {
 290   3            HmiSetInExpFunc();
 291   3          }
 292   2        }
 293   1      }
 294          
 295          void HmiSetTimeTask(void)//10
 296          {
 297   1        WS_TaskState = HmiSetTimeTIFG;
 298   1        if(WS_TaskJudge(WS_TaskState))
 299   1        {   
 300   2          WS_DelTaskIfg(WS_TaskState);
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 6   

 301   2          {
 302   3            HmiSetTimeFunc();
 303   3          }
 304   2        }
 305   1      }
 306          
 307          void HmiScreenSaverModeTask(void)//11
 308          {
 309   1        WS_TaskState = HmiScreenSaverModeTIFG;
 310   1        if(WS_TaskJudge(WS_TaskState))
 311   1        {   
 312   2          WS_DelTaskIfg(WS_TaskState);
 313   2          {
 314   3            HmiScreenSaverModeFunc();
 315   3          }
 316   2        }
 317   1      }
 318          
 319          void GetTemp_HpChamberTask(void)//12
 320          {
 321   1        WS_TaskState = GetTemp_HpChamberTIFG;
 322   1        if(WS_TaskJudge(WS_TaskState))
 323   1        {   
 324   2          WS_DelTaskIfg(WS_TaskState);
 325   2          {
 326   3            GetTemp_HpChamberFunc();
 327   3          }
 328   2        }   
 329   1      }
 330          
 331          void GetTempHumidity_PatientTask(void)//13
 332          {
 333   1        WS_TaskState = GetTempHumidity_PatientTIFG;
 334   1        if(WS_TaskJudge(WS_TaskState))
 335   1        {   
 336   2          WS_DelTaskIfg(WS_TaskState);
 337   2          {
 338   3            GetTempHumidity_PatientFunc();
 339   3          }
 340   2        }   
 341   1      }
 342          
 343          void RefreshTempHumidyTask(void)//14
 344          {
 345   1        WS_TaskState = RefreshTempHumidyTIFG;
 346   1        if(WS_TaskJudge(WS_TaskState))
 347   1        {   
 348   2          WS_DelTaskIfg(WS_TaskState);
 349   2          {
 350   3            RefreshTempHumidyFunc(0);
 351   3          }
 352   2        }   
 353   1      }
 354          
 355          void RefreshRunTimeTask(void)//15
 356          {
 357   1        WS_TaskState = RefreshRunTimeTIFG;
 358   1        if(WS_TaskJudge(WS_TaskState))
 359   1        {   
 360   2          WS_DelTaskIfg(WS_TaskState);
 361   2          {
 362   3            RefreshRunTimeFunc(0);
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 7   

 363   3          }
 364   2        }     
 365   1      }
 366          
 367          void RefreshRTCTimeTask(void)//16
 368          {
 369   1        WS_TaskState = RefreshRTCTimeTIFG;
 370   1        if(WS_TaskJudge(WS_TaskState))
 371   1        {   
 372   2          WS_DelTaskIfg(WS_TaskState);
 373   2          {
 374   3            if((Work_State != UI_STATE_SetTime_MODE)//设定时间时不刷新实时RTC时间 
 375   3                &&(Work_State != UI_STATE_SCREENSAVER_MODE))
 376   3            {
 377   4              RefreshRTCTimeFunc(); 
 378   4            } 
 379   3            
 380   3          }
 381   2        }   
 382   1      }
 383          
 384          void HeaterWireControlTask(void)//17
 385          {
 386   1        WS_TaskState = HeaterPlateWireControlTIFG;
 387   1        if(WS_TaskJudge(WS_TaskState))
 388   1        {   
 389   2          WS_DelTaskIfg(WS_TaskState);
 390   2          {
 391   3            HeaterPlateWireControlFunc();
 392   3          }
 393   2        }
 394   1      }
 395          
 396          void LowPowerModeTask(void)//18
 397          {
 398   1        WS_TaskState = LowPowerModeTIFG;
 399   1        if(WS_TaskJudge(WS_TaskState))
 400   1        {   
 401   2          WS_DelTaskIfg(WS_TaskState);
 402   2          {
 403   3            LowPowerModeFunc();
 404   3          }
 405   2        }
 406   1      }
 407          
 408          void HeaterWireModeDetTask(void)//19
 409          {
 410   1        WS_TaskState = HeaterWireModeDetTIFG;
 411   1        if(WS_TaskJudge(WS_TaskState))
 412   1        {   
 413   2          WS_DelTaskIfg(WS_TaskState);
 414   2          {
 415   3            HeaterWireModeDetFunc();
 416   3          }
 417   2        }
 418   1      }
 419          
 420          void AlarmErrorTask(void)//20
 421          {
 422   1        WS_TaskState = AlarmErrorTIFG;
 423   1        if(WS_TaskJudge(WS_TaskState))
 424   1        {   
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 8   

 425   2          WS_DelTaskIfg(WS_TaskState);
 426   2          {
 427   3            AlarmErrorFunc();
 428   3          }
 429   2        }
 430   1      }
 431          
 432          void LowTempDet1STask(void)//21
 433          {
 434   1        WS_TaskState = LowTempDet1STIFG;
 435   1        if(WS_TaskJudge(WS_TaskState))
 436   1        {   
 437   2          WS_DelTaskIfg(WS_TaskState);
 438   2          {
 439   3            LowTempDet1SFunc();
 440   3          }
 441   2        }
 442   1      }
 443          
 444          void SaveDateToFlashTask(void)//22
 445          {
 446   1        WS_TaskState = SaveDateToFlashTIFG;
 447   1        if(WS_TaskJudge(WS_TaskState))
 448   1        {   
 449   2          WS_DelTaskIfg(WS_TaskState);
 450   2          {
 451   3            SaveDateToFlashFunc();
 452   3          }
 453   2        }
 454   1      }
 455          
 456          void UartRecTask(void)//23
 457          {
 458   1          WS_TaskState = UartRecTIFG;
 459   1          if(WS_TaskJudge(WS_TaskState))
 460   1          {   
 461   2              WS_DelTaskIfg(WS_TaskState);         
 462   2              UART_RecData_Func();   
 463   2          }
 464   1      }
 465          
 466          
 467          
 468          
 469          
 470          
 471          
 472          
 473          
 474          
 475          
 476          
 477          
 478          
 479          
 480          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1436    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
C51 COMPILER V9.52.0.0   NORMAL_TASK                                                       03/30/2019 11:40:34 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
