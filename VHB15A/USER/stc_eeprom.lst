C51 COMPILER V9.59.0.0   STC_EEPROM                                                        04/11/2019 16:15:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE STC_EEPROM
OBJECT MODULE PLACED IN ..\OBJ\stc_eeprom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\SYSTEM\stc_eeprom\stc_eeprom.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) 
                    -BROWSE ORDER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;
                    -..\HARDWARE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\stc_eeprom.lst)
                    - TABS(2) OBJECT(..\OBJ\stc_eeprom.obj)

line level    source

   1          //#include <reg51.H>
   2          #include <intrins.H>
   3          #include "stc_eeprom.h"
   4          
   5          sfr IAP_DATA    = 0xC2;
   6          sfr IAP_ADDRH   = 0xC3;
   7          sfr IAP_ADDRL   = 0xC4;
   8          sfr IAP_CMD     = 0xC5;
   9          sfr IAP_TRIG    = 0xC6;
  10          sfr IAP_CONTR   = 0xC7;
  11          
  12          //Define the waiting time for Flash operations and the constants that allow IAP/ISP/EEPROM operations
  13          #define ENABLE_ISP 0x82 //
  14          
  15          //#define DATA_FLASH_START_ADDRESS 0x00  //STC5Axx Series EEPROM Starting Address
  16          
  17          //static union 
  18          //{
  19          //    INT16U un_temp16;
  20          //    INT8U  un_temp8[2];
  21          //}my_unTemp16;
  22          static struct 
  23          {
  24            INT16U un_temp16;
  25            INT8U  un_temp8[2];
  26          }my_unTemp16;
  27          
  28          
  29          static void IAP_Disable(void);  //Disable IAP function 
  30          
  31          
  32          
  33          INT8U STC_IAP_Byte_Read(INT16U add)
  34          {
  35   1          IAP_DATA = 0x00;
  36   1          IAP_CONTR = ENABLE_ISP;         //Enable IAP
  37   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM read byte command
  38   1      
  39   1          my_unTemp16.un_temp16 = add;
  40   1          IAP_ADDRH = my_unTemp16.un_temp8[0];   //Setting target address high 8bit
  41   1          IAP_ADDRL = my_unTemp16.un_temp8[1];   //Setting target address low 8bit
  42   1      
  43   1          IAP_TRIG = 0x5A;   //command 0X5A
  44   1          IAP_TRIG = 0xA5;   //command 0XA5
  45   1          _nop_();
  46   1      
  47   1          IAP_Disable();  //Disable IAP
  48   1      
  49   1          return (IAP_DATA);
  50   1      }
  51          
  52          void STC_IAP_Byte_Program(INT16U add, INT8U ch)
C51 COMPILER V9.59.0.0   STC_EEPROM                                                        04/11/2019 16:15:50 PAGE 2   

  53          {
  54   1          IAP_CONTR = ENABLE_ISP;         //Enable IAP
  55   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM write byte command
  56   1      
  57   1          my_unTemp16.un_temp16 = add;
  58   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //Setting target address high 8bit
  59   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //Setting target address low 8bit
  60   1      
  61   1          IAP_DATA = ch;    
  62   1      
  63   1          IAP_TRIG = 0x5A;   //
  64   1          IAP_TRIG = 0xA5;   //
  65   1          _nop_();
  66   1      
  67   1          IAP_Disable();  //Disable IAP
  68   1      }
  69          
  70          void STC_IAP_Sector_Erase(INT16U add)
  71          {
  72   1          IAP_CONTR = ENABLE_ISP;         //Enable IAP
  73   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM erase sector command
  74   1      
  75   1          my_unTemp16.un_temp16 = add;
  76   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //Setting target address high 8bit
  77   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //Setting target address low 8bit
  78   1      
  79   1          IAP_TRIG = 0x5A;   //
  80   1          IAP_TRIG = 0xA5;   //
  81   1          _nop_();
  82   1      
  83   1          IAP_Disable();  //Disable IAP
  84   1      }
  85          
  86          static void IAP_Disable(void) //Disable IAP
  87          { 
  88   1          IAP_CONTR = 0;      //
  89   1          IAP_CMD   = 0;      //
  90   1          IAP_TRIG  = 0;      //
  91   1          IAP_ADDRH = 0;
  92   1          IAP_ADDRL = 0;
  93   1      }
  94          
  95          
  96          
  97          
  98          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    117    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
