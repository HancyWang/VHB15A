C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE RX8010
OBJECT MODULE PLACED IN ..\OBJ\RX8010.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\HARDWARE\RX8010\RX8010.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE O
                    -RDER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\HARDW
                    -ARE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\RX8010.lst) TABS(2) OBJ
                    -ECT(..\OBJ\RX8010.obj)

line level    source

   1           //#include "STC12C32AD.h"
   2           #include "all.h" 
   3           //#include "delay.h"
   4           //#include "RX8010.h"
   5          
   6           
   7          #define SCL          P25
   8          #define SDA          P26
   9          //#define ASK            0
  10          //#define NO_ASK         1
  11          //#define OUT_LOW        0
  12          //#define INPUT_HIGH     1
  13          
  14          //#define SCL_DIR_OUTPUT()   P2M1 |= 0x10;P2M0 |= 0x10  //11 开漏输出
  15          //#define SDA_DIR_INPUT()    P2M1 |= 0x40;P2M0 &= 0xBF  //10 仅为输入
  16          //#define SDA_DIR_OUTPUT()   P2M1 |= 0x40;P2M0 |= 0x40  //11 开漏输出
  17          
  18          #define RX8010_WRITE  0x64 //I2C器件地址
  19          #define RX8010_READ   0x65
  20          
  21          //2019.03.29
  22          sfr WDT_CONTR = 0xC1;
  23          sbit EA  = (u8)0xA8^(u8)7;
  24          sbit P25 = (u8)0xA0^(u8)5;
  25          sbit P26 = (u8)0xA0^(u8)6;
  26          sfr P2M0 = 0x96;
  27          sfr P2M1 = 0x95;
  28          
  29          
  30          static void SCL_DIR_OUTPUT(void)
  31          {
  32   1        P2M1 |= (u8)0x10;
  33   1        P2M0 |= (u8)0x10;
  34   1      } 
  35          
  36          static void SDA_DIR_INPUT(void)
  37          {
  38   1        P2M1 |= (u8)0x40;
  39   1        P2M0 &= (u8)0xBF;
  40   1      }
  41          static void SDA_DIR_OUTPUT(void)
  42          {
  43   1        P2M1 |= (u8)0x40;
  44   1        P2M0 |= (u8)0x40;
  45   1      }
  46          
  47          //************************************
  48          //** 函数原型: void IC_start(void); **
  49          //** 功 能: IC 总线起始位. **
  50          //************************************
  51          static void IC_start(void)
  52          { 
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 2   

  53   1          SCL_DIR_OUTPUT();
  54   1          SDA_DIR_OUTPUT();   
  55   1          SCL=1;
  56   1          SDA=1;
  57   1          delay_us(2);
  58   1          SDA=0;
  59   1          delay_us(2);//
  60   1          SCL=0;
  61   1      }
  62          
  63          //**********************************
  64          //** 函数原型: void IC_stop(void); **
  65          //** 功 能: IC 总线停止位. **
  66          //**********************************
  67          static void IC_stop(void)
  68          {
  69   1          SCL=0;
  70   1          SDA_DIR_OUTPUT();
  71   1          SDA=0;
  72   1          delay_us(2);
  73   1          SCL=1;
  74   1          delay_us(2); //
  75   1          SDA=1;
  76   1          delay_us(2);
  77   1      }
  78          
  79          //***************************************************
  80          //** 函数原型: bit IC_writebyte(uchar wdata); **
  81          //** 功 能: 向IC 总线发送8 位数据,并请求一个应答信 **
  82          //** 号ACK.如果收到ACK 应答则返回1(TRUE), **
  83          //** 否则返回0(FALSE). **
  84          //***************************************************
  85          static uint8_t IC_WriteByte( uint8_t wdata)
  86          {
  87   1        uint8_t i;
  88   1        SDA_DIR_OUTPUT();
  89   1        for(i=0;i<8;i++)
  90   1        {
  91   2          SCL=0;
  92   2          delay_us(2);
  93   2          if((wdata&(uint8_t)0x80)!=(uint8_t)0)
  94   2          {
  95   3            SDA=1;
  96   3          }     
  97   2          else 
  98   2          {
  99   3            SDA=0;
 100   3          }
 101   2          delay_us(2);
 102   2          SCL=1;
 103   2          delay_us(4);
 104   2          wdata<<=1;
 105   2        }
 106   1        SCL=0;
 107   1        delay_us(4);
 108   1        SDA_DIR_INPUT();
 109   1        SCL=1;
 110   1        delay_us(4);
 111   1        i=0;
 112   1        while(SDA)
 113   1        {
 114   2          if(++i>12){SCL=0;return(0);}
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 3   

 115   2        }
 116   1        SCL=0;
 117   1        return(1);
 118   1      }
 119          //***********************************************
 120          //** 函数原型: uchar IC_readbyte(void); **
 121          //** 功 能: 从IC 总线上接收8 位数据,并将接受到 **
 122          //** 8 位数据作为一个字节返回,不回送应 **
 123          //** 答信号ACK. **
 124          //***********************************************
 125          static uint8_t IC_ReadByte(void)
 126          { 
 127   1        uint8_t i;
 128   1        uint8_t IC_data=0;
 129   1        SCL=0;
 130   1        SDA_DIR_OUTPUT();
 131   1        SDA=1;
 132   1        SDA_DIR_INPUT();  
 133   1        for(i=0;i<8;i++)
 134   1        {
 135   2          SCL=1;
 136   2          delay_us(2);
 137   2          IC_data<<=1;
 138   2          IC_data|=(uint8_t)SDA;
 139   2          //delay_us(4);
 140   2          SCL=1;
 141   2          delay_us(2);
 142   2          SCL=0;
 143   2          delay_us(4);
 144   2        }
 145   1        delay_us(4);
 146   1        SCL=0;
 147   1        SDA_DIR_OUTPUT();
 148   1        SDA=0;
 149   1        return(IC_data);
 150   1      }
 151          //***************************************************************
 152          //** 函数原型: bit readEEone(uchar instr,uchar addr,uchar num); **
 153          //** 功 能: 从8010 中读取num 个字节的数据,采用序列读操作方 **
 154          //** 式从片内Address 地址开始连续读取数据.8010 不接 **
 155          //** 受指定的地址则返回0(FALSE). **
 156          //***************************************************************
 157          uint8_t readEEone(uint8_t addr,uint8_t num,uint8_t *Data)
 158          {
 159   1        uint8_t i;
 160   1        IC_start();
 161   1        if(IC_WriteByte(RX8010_WRITE)==0)
 162   1        {
 163   2          IC_stop(); return(0);
 164   2        }
 165   1        if(IC_WriteByte(addr)==0)
 166   1        {
 167   2          IC_stop(); return(0);
 168   2        }
 169   1        IC_start();
 170   1        if(IC_WriteByte(RX8010_READ)==0)
 171   1        {
 172   2          IC_stop(); return(0);
 173   2        }
 174   1        for(i=0;i<(num-1);i++)
 175   1        {
 176   2          Data[i]=IC_ReadByte();
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 4   

 177   2          SDA_DIR_OUTPUT();       
 178   2          SDA=0; /** Send ACK **/   
 179   2          SCL=1;
 180   2        }
 181   1        Data[num-1]=IC_ReadByte();
 182   1        SDA_DIR_OUTPUT(); 
 183   1        SDA=1; /** Send Read End **/
 184   1        delay_us(4);
 185   1        SCL=1;
 186   1        IC_stop();
 187   1        return(1);
 188   1      }
 189          
 190          //****************************************************************
 191          //** 函数原型: bit writeEEone(uchar instr,uchar addr,uchar num); **
 192          //** 功 能: 将EEbuf[]单元中的数据写入8010 的num 个字节. **
 193          //** 采用页写操作方式,每次写入时都需要指定片内地址. **
 194          //** 如果8010 不接受指定的地址或某个传送的字节未收到 **
 195          //** 应答信号ACK,则返回0(FALSE). **
 196          //****************************************************************
 197          static void writeEEone(uint8_t addr,uint8_t num,const uint8_t *Data)
 198          {
 199   1        uint8_t i;
 200   1        //gie=0;
 201   1        IC_start();
 202   1        if(IC_WriteByte(RX8010_WRITE)==0)
 203   1        {
 204   2      //    IC_stop(); return(0);
 205   2          IC_stop();
 206   2        }
 207   1        if(IC_WriteByte(addr)==0)
 208   1        {
 209   2      //    IC_stop(); return(0);
 210   2          IC_stop();
 211   2        }
 212   1        for(i=0;i<num;i++)
 213   1        {
 214   2          if(IC_WriteByte(Data[i])==0)
 215   2          {
 216   3      //      IC_stop(); return(0);
 217   3            IC_stop();
 218   3          }
 219   2        }
 220   1        IC_stop();
 221   1        delay_us(4);
 222   1        SDA=0;
 223   1        SCL=0;
 224   1        //gie=1;
 225   1      //  return(1);
 226   1      } 
 227          
 228          
 229          //检测VLF频率停止位，若为1则初始化RX8010
 230          uint8_t RX8010_Initialize(void) 
 231          {
 232   1        uint8_t Rdata[7];
 233   1        uint8_t i;
 234   1        uint8_t Init_State;
 235   1        
 236   1        EA = 0; 
 237   1        Init_State = RX8010_INIT_NONE;//未初始化
 238   1        
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 5   

 239   1        Rdata[0] = 0x00;
 240   1        for(i = 0;i < 10;i++)
 241   1        {
 242   2          if(readEEone(0x1E,1,Rdata) == 1)
 243   2          {
 244   3            Init_State = RX8010_INIT_NONE;
 245   3            break;//读VLF状态
 246   3          }
 247   2          delay_ms(100);
 248   2          WDT_CONTR = 0x3F; 
 249   2          Init_State = RX8010_INIT_FAIL;//初始化失败
 250   2        }
 251   1        
 252   1        if(Init_State == RX8010_INIT_NONE)
 253   1        {   
 254   2          if(Bit_is_one(Rdata[0],1)!=(uint8_t)0)//判定是否停止,VLF=1
 255   2          {
 256   3            Init_State = RX8010_INIT_OK;//初始化成功
 257   3            Rdata[0] = 0x58;
 258   3            writeEEone(0x17,1,Rdata);
 259   3            Rdata[0] = 0x00;
 260   3            Rdata[1] = 0x18;
 261   3            Rdata[2] = 0x00;
 262   3            writeEEone(0x30,3,Rdata); 
 263   3            Rdata[0] = 0x04;//无中断输出
 264   3            Rdata[1] = 0x00;//清AF和VLF
 265   3            Rdata[2] = 0x40;    
 266   3            writeEEone(0x1D,3,Rdata); 
 267   3            
 268   3            Rdata[0] = 0x00;//SEC
 269   3            Rdata[1] = 0x00;//MIN
 270   3            Rdata[2] = 0x00;//HOUR
 271   3            Rdata[3] = 0x10;//WEEK
 272   3            Rdata[4] = 0x01;//DAY
 273   3            Rdata[5] = 0x01;//MONTH
 274   3            Rdata[6] = 0x15;//YEAR 2015-01-01-00:00:00-Tursday
 275   3            writeEEone(0x10,7,Rdata);//设定时间
 276   3            
 277   3            Rdata[0] = 0x00;//MIN
 278   3            Rdata[1] = 0x00;//HOUR
 279   3            Rdata[2] = 0x00;//WEEK
 280   3            writeEEone(0x18,3,Rdata);//设定闹钟
 281   3            
 282   3            Rdata[0] = 0x00;//MIN
 283   3            Rdata[1] = 0x00;//HOUR
 284   3            writeEEone(0x1B,2,Rdata);//设定定时
 285   3            
 286   3            Rdata[0] = 0x00;//STOP位为0
 287   3            writeEEone(0x1F,1,Rdata);     
 288   3          } 
 289   2        }
 290   1        EA = 1;
 291   1        return Init_State;
 292   1      }
 293           
 294          //设定时钟
 295          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 296          void RX8010_SetTime(const BYTE *p) 
 297          {
 298   1        uint8_t Rdata[7];
 299   1        
 300   1        Rdata[0] = 0x40;//STOP位为1
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 6   

 301   1        writeEEone(0x1F,1,Rdata);
 302   1        
 303   1        Rdata[0] = *p;//SEC
 304   1      //  Rdata[1] = *(p+1);//MIN
 305   1      //  Rdata[2] = *(p+2);//HOUR  
 306   1      //  Rdata[3] = *(p+5);//WEEK
 307   1        Rdata[1] = p[1];//MIN
 308   1        Rdata[2] = p[2];//HOUR  
 309   1        Rdata[3] = p[5];//WEEK
 310   1      
 311   1      //  data[3] = 1 << *(p+5); //WEEK由DS1302转换为RX8010 
 312   1      //  if(data[3]==0x80)data[3]=1;//DS1302星期天为7，而RX8010是低位为1
 313   1      
 314   1      //  Rdata[4] = *(p+3);//DAY
 315   1      //  Rdata[5] = *(p+4);//MONTH
 316   1      //  Rdata[6] = *(p+6);//YEAR 2015-01-01-00:00:00-Tursday
 317   1        Rdata[4] = p[3];//DAY
 318   1        Rdata[5] = p[4];//MONTH
 319   1        Rdata[6] = p[6];//YEAR 2015-01-01-00:00:00-Tursday
 320   1        writeEEone(0x10,7,Rdata);
 321   1        
 322   1        Rdata[0] = 0x00;//STOP位为0
 323   1        writeEEone(0x1F,1,Rdata); 
 324   1      }
 325            
 326          //读取时钟
 327          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 328          void RX8010_GetTime(BYTE *p) 
 329          {
 330   1        uint8_t Rdata[7];
 331   1        
 332   1        readEEone(0x10,7,Rdata);
 333   1        *p = Rdata[0];//SEC 
 334   1      //  *(p+1) = Rdata[1];//MIN
 335   1      //  *(p+2) = Rdata[2];//HOUR
 336   1      //  *(p+5) = Rdata[3];//WEEK
 337   1        p[1]= Rdata[1];//MIN
 338   1        p[2] = Rdata[2];//HOUR
 339   1        p[5] = Rdata[3];//WEEK
 340   1      //  // 注意：未使用星期
 341   1      //  for(i = 1;i > 7; i++)
 342   1      //  {
 343   1      //    if((*(p+5) >> i)==0)break;
 344   1      //  }
 345   1      //  *(p+5) = i;
 346   1      //  if(*(p+5) == 1)//星期天
 347   1      //  {
 348   1      //    *(p+5) = 7;
 349   1      //  }
 350   1      //  else
 351   1      //  {
 352   1      //    *(p+5) -=1;
 353   1      //  }
 354   1      //  
 355   1        
 356   1      //  *(p+3) = Rdata[4];//DAY
 357   1      //  *(p+4) = Rdata[5];//MONTH
 358   1      //  *(p+6) = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 359   1        p[3] = Rdata[4];//DAY
 360   1        p[4] = Rdata[5];//MONTH
 361   1        p[6] = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 362   1      }
C51 COMPILER V9.52.0.0   RX8010                                                            04/08/2019 16:01:01 PAGE 7   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1110    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
