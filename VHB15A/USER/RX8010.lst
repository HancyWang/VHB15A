C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RX8010
OBJECT MODULE PLACED IN ..\OBJ\RX8010.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\RX8010\RX8010.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE
                    - ORDER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\HAR
                    -DWARE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\RX8010.lst) TABS(2) O
                    -BJECT(..\OBJ\RX8010.obj)

line level    source

   1           //#include "STC12C32AD.h"
   2           #include "all.h" 
   3           //#include "delay.h"
   4           //#include "RX8010.h"
   5          
   6           
   7          #define SCL_          P25
   8          #define SDA_          P26
   9          //#define ASK            0
  10          //#define NO_ASK         1
  11          //#define OUT_LOW        0
  12          //#define INPUT_HIGH     1
  13          
  14          //#define SCL_DIR_OUTPUT()   P2M1 |= 0x10;P2M0 |= 0x10  //11 开漏输出
  15          //#define SDA_DIR_INPUT()    P2M1 |= 0x40;P2M0 &= 0xBF  //10 仅为输入
  16          //#define SDA_DIR_OUTPUT()   P2M1 |= 0x40;P2M0 |= 0x40  //11 开漏输出
  17          
  18          #define RX8010_WRITE  0x64 //I2C器件地址
  19          #define RX8010_READ   0x65
  20          
  21          //2019.03.29
  22          sfr WDT_CONTR = 0xC1;
  23          sbit EA  = (u8)0xA8^(u8)7;
  24          sbit P25 = (u8)0xA0^(u8)5;
  25          sbit P26 = (u8)0xA0^(u8)6;
  26          sfr P2M0 = 0x96;
  27          sfr P2M1 = 0x95;
  28          
  29          
  30          static void SCL_DIR_OUTPUT(void)
  31          {
  32   1        P2M1 |= (u8)0x10;
  33   1        P2M0 |= (u8)0x10;
  34   1      } 
  35          
  36          static void SDA_DIR_INPUT(void)
  37          {
  38   1        P2M1 |= (u8)0x40;
  39   1        P2M0 &= (u8)0xBF;
  40   1      }
  41          static void SDA_DIR_OUTPUT(void)
  42          {
  43   1        P2M1 |= (u8)0x40;
  44   1        P2M0 |= (u8)0x40;
  45   1      }
  46          
  47          //************************************
  48          //** 函数原型: void IC_start(void); **
  49          //** 功 能: IC 总线起始位. **
  50          //************************************
  51          static void IC_start(void)
  52          { 
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 2   

  53   1          SCL_DIR_OUTPUT();
  54   1          SDA_DIR_OUTPUT();   
  55   1          SCL_=(bit)1;
  56   1          SDA_=(bit)1;
  57   1          delay_us(2);
  58   1          SDA_=(bit)0;
  59   1          delay_us(2);//
  60   1          SCL_=(bit)0;
  61   1      }
  62          
  63          //**********************************
  64          //** 函数原型: void IC_stop(void); **
  65          //** 功 能: IC 总线停止位. **
  66          //**********************************
  67          static void IC_stop(void)
  68          {
  69   1          SCL_=(bit)0;
  70   1          SDA_DIR_OUTPUT();
  71   1          SDA_=(bit)0;
  72   1          delay_us(2);
  73   1          SCL_=(bit)1;
  74   1          delay_us(2); //
  75   1          SDA_=(bit)1;
  76   1          delay_us(2);
  77   1      }
  78          
  79          //***************************************************
  80          //** 函数原型: bit IC_writebyte(uchar wdata); **
  81          //** 功 能: 向IC 总线发送8 位数据,并请求一个应答信 **
  82          //** 号ACK.如果收到ACK 应答则返回1(TRUE), **
  83          //** 否则返回0(FALSE). **
  84          //***************************************************
  85          static uint8_t IC_WriteByte( uint8_t wdata)
  86          {
  87   1        uint8_t i;
  88   1        uint8_t ret=1;
  89   1        SDA_DIR_OUTPUT();
  90   1        for(i=0;i<(u8)8;i++)
  91   1        {
  92   2          SCL_=(bit)0;
  93   2          delay_us(2);
  94   2          if((wdata&(uint8_t)0x80)!=(uint8_t)0)
  95   2          {
  96   3            SDA_=(bit)1;
  97   3          }     
  98   2          else 
  99   2          {
 100   3            SDA_=(bit)0;
 101   3          }
 102   2          delay_us(2);
 103   2          SCL_=(bit)1;
 104   2          delay_us(4);
 105   2          wdata<<=1;
 106   2        }
 107   1        SCL_=(bit)0;
 108   1        delay_us(4);
 109   1        SDA_DIR_INPUT();
 110   1        SCL_=(bit)1;
 111   1        delay_us(4);
 112   1        i=0;
 113   1        while(SDA_)
 114   1        {
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 3   

 115   2          if(++i>(u8)12){SCL_=(bit)0;ret=(uint8_t)0;break;}
 116   2        }
 117   1        if(ret==(uint8_t)1)
 118   1        {
 119   2          SCL_=(bit)0;
 120   2        }
 121   1        return ret;
 122   1      }
 123          //***********************************************
 124          //** 函数原型: uchar IC_readbyte(void); **
 125          //** 功 能: 从IC 总线上接收8 位数据,并将接受到 **
 126          //** 8 位数据作为一个字节返回,不回送应 **
 127          //** 答信号ACK. **
 128          //***********************************************
 129          static uint8_t IC_ReadByte(void)
 130          { 
 131   1        uint8_t i;
 132   1        uint8_t IC_data=0;
 133   1        SCL_=(bit)0;
 134   1        SDA_DIR_OUTPUT();
 135   1        SDA_=(bit)1;
 136   1        SDA_DIR_INPUT();  
 137   1        for(i=0;i<(uint8_t)8;i++)
 138   1        {
 139   2          SCL_=(bit)1;
 140   2          delay_us(2);
 141   2          IC_data<<=1;
 142   2          IC_data|=SDA_;
 143   2          //delay_us(4);
 144   2          SCL_=(bit)1;
 145   2          delay_us(2);
 146   2          SCL_=(bit)0;
 147   2          delay_us(4);
 148   2        }
 149   1        delay_us(4);
 150   1        SCL_=(bit)0;
 151   1        SDA_DIR_OUTPUT();
 152   1        SDA_=(bit)0;
 153   1        return(IC_data);
 154   1      }
 155          //***************************************************************
 156          //** 函数原型: bit readEEone(uchar instr,uchar addr,uchar num); **
 157          //** 功 能: 从8010 中读取num 个字节的数据,采用序列读操作方 **
 158          //** 式从片内Address 地址开始连续读取数据.8010 不接 **
 159          //** 受指定的地址则返回0(FALSE). **
 160          //***************************************************************
 161          uint8_t readEEone(uint8_t addr,uint8_t num,uint8_t *Data)
 162          {
 163   1      //  uint8_t i;
 164   1      //  IC_start();
 165   1      //  if(IC_WriteByte(RX8010_WRITE)==0)
 166   1      //  {
 167   1      //    IC_stop(); return(0);
 168   1      //  }
 169   1      //  
 170   1      //  if(IC_WriteByte(addr)==0)
 171   1      //  {
 172   1      //    IC_stop(); return(0);
 173   1      //  }
 174   1      //  IC_start();
 175   1      //  if(IC_WriteByte(RX8010_READ)==0)
 176   1      //  {
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 4   

 177   1      //    IC_stop(); return(0);
 178   1      //  }
 179   1      //  for(i=0;i<(num-1);i++)
 180   1      //  {
 181   1      //    Data[i]=IC_ReadByte();
 182   1      //    SDA_DIR_OUTPUT();       
 183   1      //    SDA_=0;   
 184   1      //    SCL_=1;
 185   1      //  }
 186   1      //  Data[num-1]=IC_ReadByte();
 187   1      //  SDA_DIR_OUTPUT(); 
 188   1      //  SDA_=1; 
 189   1      //  delay_us(4);
 190   1      //  SCL_=1;
 191   1      //  IC_stop();
 192   1      //  return(1);
 193   1      
 194   1        uint8_t i;
 195   1        uint8_t ret=1;
 196   1        IC_start();
 197   1        if(IC_WriteByte(RX8010_WRITE)==(u8)0)
 198   1        {
 199   2          IC_stop(); ret=(uint8_t)0;
 200   2        }
 201   1        else if(IC_WriteByte(addr)==(u8)0)
 202   1        {
 203   2          IC_stop(); ret=(uint8_t)0;
 204   2        }
 205   1        else
 206   1        {
 207   2          IC_start();
 208   2          if(IC_WriteByte(RX8010_READ)==(u8)0)
 209   2          {
 210   3            
 211   3            IC_stop(); ret=(uint8_t)0;
 212   3          }
 213   2          else
 214   2          {
 215   3            for(i=0;i<(num-(u8)1);i++)
 216   3            {
 217   4              Data[i]=IC_ReadByte();
 218   4              SDA_DIR_OUTPUT();       
 219   4              SDA_=(bit)0; /** Send ACK **/   
 220   4              SCL_=(bit)1;
 221   4            }
 222   3            Data[num-(u8)1]=IC_ReadByte();
 223   3            SDA_DIR_OUTPUT(); 
 224   3            SDA_=(bit)1; /** Send Read End **/
 225   3            delay_us(4);
 226   3            SCL_=(bit)1;
 227   3            IC_stop();
 228   3          }
 229   2        }
 230   1        return ret;
 231   1      }
 232          
 233          //****************************************************************
 234          //** 函数原型: bit writeEEone(uchar instr,uchar addr,uchar num); **
 235          //** 功 能: 将EEbuf[]单元中的数据写入8010 的num 个字节. **
 236          //** 采用页写操作方式,每次写入时都需要指定片内地址. **
 237          //** 如果8010 不接受指定的地址或某个传送的字节未收到 **
 238          //** 应答信号ACK,则返回0(FALSE). **
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 5   

 239          //****************************************************************
 240          static void writeEEone(uint8_t addr,uint8_t num,const uint8_t *Data)
 241          {
 242   1        uint8_t i;
 243   1        //gie=0;
 244   1        IC_start();
 245   1        if(IC_WriteByte(RX8010_WRITE)==(u8)0)
 246   1        {
 247   2      //    IC_stop(); return(0);
 248   2          IC_stop();
 249   2        }
 250   1        if(IC_WriteByte(addr)==(u8)0)
 251   1        {
 252   2      //    IC_stop(); return(0);
 253   2          IC_stop();
 254   2        }
 255   1        for(i=0;i<num;i++)
 256   1        {
 257   2          if(IC_WriteByte(Data[i])==(u8)0)
 258   2          {
 259   3      //      IC_stop(); return(0);
 260   3            IC_stop();
 261   3          }
 262   2        }
 263   1        IC_stop();
 264   1        delay_us(4);
 265   1        SDA_=(bit)0;
 266   1        SCL_=(bit)0;
 267   1        //gie=1;
 268   1      //  return(1);
 269   1      } 
 270          
 271          
 272          //检测VLF频率停止位，若为1则初始化RX8010
 273          uint8_t RX8010_Initialize(void) 
 274          {
 275   1        uint8_t Rdata[7];
 276   1        uint8_t i;
 277   1        uint8_t Init_State;
 278   1        
 279   1        EA = (bit)0;  
 280   1        Init_State = RX8010_INIT_NONE;//未初始化
 281   1        
 282   1        Rdata[0] = 0x00;
 283   1        for(i = 0;i < (u8)10;i++)
 284   1        {
 285   2          if(readEEone(0x1E,1,Rdata) == (u8)1)
 286   2          {
 287   3            Init_State = RX8010_INIT_NONE;
 288   3            break;//读VLF状态
 289   3          }
 290   2          delay_ms(100);
 291   2          WDT_CONTR = 0x3F; 
 292   2          Init_State = RX8010_INIT_FAIL;//初始化失败
 293   2        }
 294   1        
 295   1        if(Init_State == (u8)RX8010_INIT_NONE)
 296   1        {   
 297   2          if(Bit_is_one(Rdata[0],1)!=(uint8_t)0)//判定是否停止,VLF=1
 298   2          {
 299   3            Init_State = RX8010_INIT_OK;//初始化成功
 300   3            Rdata[0] = 0x58;
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 6   

 301   3            writeEEone(0x17,1,Rdata);
 302   3            Rdata[0] = 0x00;
 303   3            Rdata[1] = 0x18;
 304   3            Rdata[2] = 0x00;
 305   3            writeEEone(0x30,3,Rdata); 
 306   3            Rdata[0] = 0x04;//无中断输出
 307   3            Rdata[1] = 0x00;//清AF和VLF
 308   3            Rdata[2] = 0x40;    
 309   3            writeEEone(0x1D,3,Rdata); 
 310   3            
 311   3            Rdata[0] = 0x00;//SEC
 312   3            Rdata[1] = 0x00;//MIN
 313   3            Rdata[2] = 0x00;//HOUR
 314   3            Rdata[3] = 0x10;//WEEK
 315   3            Rdata[4] = 0x01;//DAY
 316   3            Rdata[5] = 0x01;//MONTH
 317   3            Rdata[6] = 0x15;//YEAR 2015-01-01-00:00:00-Tursday
 318   3            writeEEone(0x10,7,Rdata);//设定时间
 319   3            
 320   3            Rdata[0] = 0x00;//MIN
 321   3            Rdata[1] = 0x00;//HOUR
 322   3            Rdata[2] = 0x00;//WEEK
 323   3            writeEEone(0x18,3,Rdata);//设定闹钟
 324   3            
 325   3            Rdata[0] = 0x00;//MIN
 326   3            Rdata[1] = 0x00;//HOUR
 327   3            writeEEone(0x1B,2,Rdata);//设定定时
 328   3            
 329   3            Rdata[0] = 0x00;//STOP位为0
 330   3            writeEEone(0x1F,1,Rdata);     
 331   3          } 
 332   2        }
 333   1        EA = (bit)1;
 334   1        return Init_State;
 335   1      }
 336           
 337          //设定时钟
 338          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 339          void RX8010_SetTime(const BYTE *p) 
 340          {
 341   1        uint8_t Rdata[7];
 342   1        
 343   1        Rdata[0] = 0x40;//STOP位为1
 344   1        writeEEone(0x1F,1,Rdata);
 345   1        
 346   1        Rdata[0] = *p;//SEC
 347   1      //  Rdata[1] = *(p+1);//MIN
 348   1      //  Rdata[2] = *(p+2);//HOUR  
 349   1      //  Rdata[3] = *(p+5);//WEEK
 350   1        Rdata[1] = p[1];//MIN
 351   1        Rdata[2] = p[2];//HOUR  
 352   1        Rdata[3] = p[5];//WEEK
 353   1      
 354   1      //  data[3] = 1 << *(p+5); //WEEK由DS1302转换为RX8010 
 355   1      //  if(data[3]==0x80)data[3]=1;//DS1302星期天为7，而RX8010是低位为1
 356   1      
 357   1      //  Rdata[4] = *(p+3);//DAY
 358   1      //  Rdata[5] = *(p+4);//MONTH
 359   1      //  Rdata[6] = *(p+6);//YEAR 2015-01-01-00:00:00-Tursday
 360   1        Rdata[4] = p[3];//DAY
 361   1        Rdata[5] = p[4];//MONTH
 362   1        Rdata[6] = p[6];//YEAR 2015-01-01-00:00:00-Tursday
C51 COMPILER V9.59.0.0   RX8010                                                            04/11/2019 16:15:51 PAGE 7   

 363   1        writeEEone(0x10,7,Rdata);
 364   1        
 365   1        Rdata[0] = 0x00;//STOP位为0
 366   1        writeEEone(0x1F,1,Rdata); 
 367   1      }
 368            
 369          //读取时钟
 370          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 371          void RX8010_GetTime(BYTE *p) 
 372          {
 373   1        uint8_t Rdata[7];
 374   1        
 375   1      //  readEEone(0x10,7,Rdata);
 376   1        if(readEEone(0x10,7,Rdata)==(uint8_t)1)
 377   1        {
 378   2          *p = Rdata[0];//SEC 
 379   2          //  *(p+1) = Rdata[1];//MIN
 380   2          //  *(p+2) = Rdata[2];//HOUR
 381   2          //  *(p+5) = Rdata[3];//WEEK
 382   2          p[1]= Rdata[1];//MIN
 383   2          p[2] = Rdata[2];//HOUR
 384   2          p[5] = Rdata[3];//WEEK
 385   2          //  // 注意：未使用星期
 386   2          //  for(i = 1;i > 7; i++)
 387   2          //  {
 388   2          //    if((*(p+5) >> i)==0)break;
 389   2          //  }
 390   2          //  *(p+5) = i;
 391   2          //  if(*(p+5) == 1)//星期天
 392   2          //  {
 393   2          //    *(p+5) = 7;
 394   2          //  }
 395   2          //  else
 396   2          //  {
 397   2          //    *(p+5) -=1;
 398   2          //  }
 399   2          //  
 400   2      
 401   2          //  *(p+3) = Rdata[4];//DAY
 402   2          //  *(p+4) = Rdata[5];//MONTH
 403   2          //  *(p+6) = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 404   2          p[3] = Rdata[4];//DAY
 405   2          p[4] = Rdata[5];//MONTH
 406   2          p[6] = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 407   2        }
 408   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1152    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
