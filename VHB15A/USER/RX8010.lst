C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE RX8010
OBJECT MODULE PLACED IN ..\OBJ\RX8010.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\HARDWARE\RX8010\RX8010.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE O
                    -RDER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\HARDW
                    -ARE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\RX8010.lst) TABS(2) OBJ
                    -ECT(..\OBJ\RX8010.obj)

line level    source

   1           //#include "STC12C32AD.h"
   2           #include "all.h" 
   3           //#include "delay.h"
   4           //#include "RX8010.h"
   5          
   6           
   7          #define SCL          P25
   8          #define SDA          P26
   9          //#define ASK            0
  10          //#define NO_ASK         1
  11          //#define OUT_LOW        0
  12          //#define INPUT_HIGH     1
  13          
  14          #define SCL_DIR_OUTPUT()   P2M1 |= 0x10;P2M0 |= 0x10  //11 开漏输出
  15          #define SDA_DIR_INPUT()    P2M1 |= 0x40;P2M0 &= 0xBF  //10 仅为输入
  16          #define SDA_DIR_OUTPUT()   P2M1 |= 0x40;P2M0 |= 0x40  //11 开漏输出
  17          
  18          #define RX8010_WRITE  0x64 //I2C器件地址
  19          #define RX8010_READ   0x65
  20          
  21          //2019.03.29
  22          sfr WDT_CONTR = 0xC1;
  23          sbit EA       = 0xA8^7;
  24          sbit P25 = 0xA0^5;
  25          sbit P26 = 0xA0^6;
  26          sfr P2M0 = 0x96;
  27          sfr P2M1 = 0x95;
  28          
  29          //************************************
  30          //** 函数原型: void IC_start(void); **
  31          //** 功 能: IC 总线起始位. **
  32          //************************************
  33          static void IC_start(void)
  34          { 
  35   1          SCL_DIR_OUTPUT();
  36   1          SDA_DIR_OUTPUT();   
  37   1          SCL=1;
  38   1          SDA=1;
  39   1          delay_us(2);
  40   1          SDA=0;
  41   1          delay_us(2);//
  42   1          SCL=0;
  43   1      }
  44          
  45          //**********************************
  46          //** 函数原型: void IC_stop(void); **
  47          //** 功 能: IC 总线停止位. **
  48          //**********************************
  49          static void IC_stop(void)
  50          {
  51   1          SCL=0;
  52   1          SDA_DIR_OUTPUT();
C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 2   

  53   1          SDA=0;
  54   1          delay_us(2);
  55   1          SCL=1;
  56   1          delay_us(2); //
  57   1          SDA=1;
  58   1          delay_us(2);
  59   1      }
  60          
  61          //***************************************************
  62          //** 函数原型: bit IC_writebyte(uchar wdata); **
  63          //** 功 能: 向IC 总线发送8 位数据,并请求一个应答信 **
  64          //** 号ACK.如果收到ACK 应答则返回1(TRUE), **
  65          //** 否则返回0(FALSE). **
  66          //***************************************************
  67          static uint8_t IC_WriteByte( uint8_t wdata)
  68          {
  69   1        uint8_t i;
  70   1        SDA_DIR_OUTPUT();
  71   1        for(i=0;i<8;i++)
  72   1        {
  73   2          SCL=0;
  74   2          delay_us(2);
  75   2          if((wdata&(uint8_t)0x80)!=(uint8_t)0)
  76   2          {
  77   3            SDA=1;
  78   3          }     
  79   2          else 
  80   2          {
  81   3            SDA=0;
  82   3          }
  83   2          delay_us(2);
  84   2          SCL=1;
  85   2          delay_us(4);
  86   2          wdata<<=1;
  87   2        }
  88   1        SCL=0;
  89   1        delay_us(4);
  90   1        SDA_DIR_INPUT();
  91   1        SCL=1;
  92   1        delay_us(4);
  93   1        i=0;
  94   1        while(SDA)
  95   1        {
  96   2          if(++i>12){SCL=0;return(0);}
  97   2        }
  98   1        SCL=0;
  99   1        return(1);
 100   1      }
 101          //***********************************************
 102          //** 函数原型: uchar IC_readbyte(void); **
 103          //** 功 能: 从IC 总线上接收8 位数据,并将接受到 **
 104          //** 8 位数据作为一个字节返回,不回送应 **
 105          //** 答信号ACK. **
 106          //***********************************************
 107          static uint8_t IC_ReadByte(void)
 108          { 
 109   1        uint8_t i;
 110   1        uint8_t IC_data=0;
 111   1        SCL=0;
 112   1        SDA_DIR_OUTPUT();
 113   1        SDA=1;
 114   1        SDA_DIR_INPUT();  
C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 3   

 115   1        for(i=0;i<8;i++)
 116   1        {
 117   2          SCL=1;
 118   2          delay_us(2);
 119   2          IC_data<<=1;
 120   2          IC_data|=SDA;
 121   2          //delay_us(4);
 122   2          SCL=1;
 123   2          delay_us(2);
 124   2          SCL=0;
 125   2          delay_us(4);
 126   2        }
 127   1        delay_us(4);
 128   1        SCL=0;
 129   1        SDA_DIR_OUTPUT();
 130   1        SDA=0;
 131   1        return(IC_data);
 132   1      }
 133          //***************************************************************
 134          //** 函数原型: bit readEEone(uchar instr,uchar addr,uchar num); **
 135          //** 功 能: 从8010 中读取num 个字节的数据,采用序列读操作方 **
 136          //** 式从片内Address 地址开始连续读取数据.8010 不接 **
 137          //** 受指定的地址则返回0(FALSE). **
 138          //***************************************************************
 139          uint8_t readEEone(uint8_t addr,uint8_t num,uint8_t *Data)
 140          {
 141   1        uint8_t i;
 142   1        IC_start();
 143   1        if(IC_WriteByte(RX8010_WRITE)==0)
 144   1        {
 145   2          IC_stop(); return(0);
 146   2        }
 147   1        if(IC_WriteByte(addr)==0)
 148   1        {
 149   2          IC_stop(); return(0);
 150   2        }
 151   1        IC_start();
 152   1        if(IC_WriteByte(RX8010_READ)==0)
 153   1        {
 154   2          IC_stop(); return(0);
 155   2        }
 156   1        for(i=0;i<(num-1);i++)
 157   1        {
 158   2          Data[i]=IC_ReadByte();
 159   2          SDA_DIR_OUTPUT();       
 160   2          SDA=0; /** Send ACK **/   
 161   2          SCL=1;
 162   2        }
 163   1        Data[num-1]=IC_ReadByte();
 164   1        SDA_DIR_OUTPUT(); 
 165   1        SDA=1; /** Send Read End **/
 166   1        delay_us(4);
 167   1        SCL=1;
 168   1        IC_stop();
 169   1        return(1);
 170   1      }
 171          
 172          //****************************************************************
 173          //** 函数原型: bit writeEEone(uchar instr,uchar addr,uchar num); **
 174          //** 功 能: 将EEbuf[]单元中的数据写入8010 的num 个字节. **
 175          //** 采用页写操作方式,每次写入时都需要指定片内地址. **
 176          //** 如果8010 不接受指定的地址或某个传送的字节未收到 **
C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 4   

 177          //** 应答信号ACK,则返回0(FALSE). **
 178          //****************************************************************
 179          static void writeEEone(uint8_t addr,uint8_t num,const uint8_t *Data)
 180          {
 181   1        uint8_t i;
 182   1        //gie=0;
 183   1        IC_start();
 184   1        if(IC_WriteByte(RX8010_WRITE)==0)
 185   1        {
 186   2      //    IC_stop(); return(0);
 187   2          IC_stop();
 188   2        }
 189   1        if(IC_WriteByte(addr)==0)
 190   1        {
 191   2      //    IC_stop(); return(0);
 192   2          IC_stop();
 193   2        }
 194   1        for(i=0;i<num;i++)
 195   1        {
 196   2          if(IC_WriteByte(Data[i])==0)
 197   2          {
 198   3      //      IC_stop(); return(0);
 199   3            IC_stop();
 200   3          }
 201   2        }
 202   1        IC_stop();
 203   1        delay_us(4);
 204   1        SDA=0;
 205   1        SCL=0;
 206   1        //gie=1;
 207   1      //  return(1);
 208   1      } 
 209          
 210          
 211          //检测VLF频率停止位，若为1则初始化RX8010
 212          uint8_t RX8010_Initialize(void) 
 213          {
 214   1        uint8_t Rdata[7];
 215   1        uint8_t i;
 216   1        uint8_t Init_State;
 217   1        
 218   1        EA = 0; 
 219   1        Init_State = RX8010_INIT_NONE;//未初始化
 220   1        
 221   1        Rdata[0] = 0x00;
 222   1        for(i = 0;i < 10;i++)
 223   1        {
 224   2          if(readEEone(0x1E,1,Rdata) == 1)
 225   2          {
 226   3            Init_State = RX8010_INIT_NONE;
 227   3            break;//读VLF状态
 228   3          }
 229   2          delay_ms(100);
 230   2          WDT_CONTR = 0x3F; 
 231   2          Init_State = RX8010_INIT_FAIL;//初始化失败
 232   2        }
 233   1        
 234   1        if(Init_State == RX8010_INIT_NONE)
 235   1        {   
 236   2          if(Bit_is_one(Rdata[0],1)!=(uint8_t)0)//判定是否停止,VLF=1
 237   2          {
 238   3            Init_State = RX8010_INIT_OK;//初始化成功
C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 5   

 239   3            Rdata[0] = 0x58;
 240   3            writeEEone(0x17,1,Rdata);
 241   3            Rdata[0] = 0x00;
 242   3            Rdata[1] = 0x18;
 243   3            Rdata[2] = 0x00;
 244   3            writeEEone(0x30,3,Rdata); 
 245   3            Rdata[0] = 0x04;//无中断输出
 246   3            Rdata[1] = 0x00;//清AF和VLF
 247   3            Rdata[2] = 0x40;    
 248   3            writeEEone(0x1D,3,Rdata); 
 249   3            
 250   3            Rdata[0] = 0x00;//SEC
 251   3            Rdata[1] = 0x00;//MIN
 252   3            Rdata[2] = 0x00;//HOUR
 253   3            Rdata[3] = 0x10;//WEEK
 254   3            Rdata[4] = 0x01;//DAY
 255   3            Rdata[5] = 0x01;//MONTH
 256   3            Rdata[6] = 0x15;//YEAR 2015-01-01-00:00:00-Tursday
 257   3            writeEEone(0x10,7,Rdata);//设定时间
 258   3            
 259   3            Rdata[0] = 0x00;//MIN
 260   3            Rdata[1] = 0x00;//HOUR
 261   3            Rdata[2] = 0x00;//WEEK
 262   3            writeEEone(0x18,3,Rdata);//设定闹钟
 263   3            
 264   3            Rdata[0] = 0x00;//MIN
 265   3            Rdata[1] = 0x00;//HOUR
 266   3            writeEEone(0x1B,2,Rdata);//设定定时
 267   3            
 268   3            Rdata[0] = 0x00;//STOP位为0
 269   3            writeEEone(0x1F,1,Rdata);     
 270   3          } 
 271   2        }
 272   1        EA = 1;
 273   1        return Init_State;
 274   1      }
 275           
 276          //设定时钟
 277          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 278          void RX8010_SetTime(const BYTE *p) 
 279          {
 280   1        uint8_t Rdata[7];
 281   1        
 282   1        Rdata[0] = 0x40;//STOP位为1
 283   1        writeEEone(0x1F,1,Rdata);
 284   1        
 285   1        Rdata[0] = *p;//SEC
 286   1      //  Rdata[1] = *(p+1);//MIN
 287   1      //  Rdata[2] = *(p+2);//HOUR  
 288   1      //  Rdata[3] = *(p+5);//WEEK
 289   1        Rdata[1] = p[1];//MIN
 290   1        Rdata[2] = p[2];//HOUR  
 291   1        Rdata[3] = p[5];//WEEK
 292   1      
 293   1      //  data[3] = 1 << *(p+5); //WEEK由DS1302转换为RX8010 
 294   1      //  if(data[3]==0x80)data[3]=1;//DS1302星期天为7，而RX8010是低位为1
 295   1      
 296   1      //  Rdata[4] = *(p+3);//DAY
 297   1      //  Rdata[5] = *(p+4);//MONTH
 298   1      //  Rdata[6] = *(p+6);//YEAR 2015-01-01-00:00:00-Tursday
 299   1        Rdata[4] = p[3];//DAY
 300   1        Rdata[5] = p[4];//MONTH
C51 COMPILER V9.52.0.0   RX8010                                                            04/04/2019 16:21:58 PAGE 6   

 301   1        Rdata[6] = p[6];//YEAR 2015-01-01-00:00:00-Tursday
 302   1        writeEEone(0x10,7,Rdata);
 303   1        
 304   1        Rdata[0] = 0x00;//STOP位为0
 305   1        writeEEone(0x1F,1,Rdata); 
 306   1      }
 307            
 308          //读取时钟
 309          //注意，原来是DS1302，改为RX8010后，顺序不同，另外，星期由8421BCD码改为位
 310          void RX8010_GetTime(BYTE *p) 
 311          {
 312   1        uint8_t Rdata[7];
 313   1        
 314   1        readEEone(0x10,7,Rdata);
 315   1        *p = Rdata[0];//SEC 
 316   1      //  *(p+1) = Rdata[1];//MIN
 317   1      //  *(p+2) = Rdata[2];//HOUR
 318   1      //  *(p+5) = Rdata[3];//WEEK
 319   1        p[1]= Rdata[1];//MIN
 320   1        p[2] = Rdata[2];//HOUR
 321   1        p[5] = Rdata[3];//WEEK
 322   1      //  // 注意：未使用星期
 323   1      //  for(i = 1;i > 7; i++)
 324   1      //  {
 325   1      //    if((*(p+5) >> i)==0)break;
 326   1      //  }
 327   1      //  *(p+5) = i;
 328   1      //  if(*(p+5) == 1)//星期天
 329   1      //  {
 330   1      //    *(p+5) = 7;
 331   1      //  }
 332   1      //  else
 333   1      //  {
 334   1      //    *(p+5) -=1;
 335   1      //  }
 336   1      //  
 337   1        
 338   1      //  *(p+3) = Rdata[4];//DAY
 339   1      //  *(p+4) = Rdata[5];//MONTH
 340   1      //  *(p+6) = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 341   1        p[3] = Rdata[4];//DAY
 342   1        p[4] = Rdata[5];//MONTH
 343   1        p[6] = Rdata[6];//YEAR 2015-01-01-00:00:00-Tursday
 344   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1111    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
