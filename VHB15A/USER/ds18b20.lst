C51 COMPILER V9.59.0.0   DS18B20                                                           04/11/2019 16:15:52 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ..\OBJ\ds18b20.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\DS18b20\ds18b20.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROW
                    -SE ORDER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\H
                    -ARDWARE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\ds18b20.lst) TABS(2
                    -) OBJECT(..\OBJ\ds18b20.obj)

line level    source

   1          // #include "STC12C32AD.h"
   2           #include "all.h"
   3          // #include "INTRINS.H" 
   4          // #include "delay.h"
   5          // #include "ds18b20.h"
   6           
   7          uint8_t   Read_18B20_Value;
   8          uint8_t   Read_18B20_Value2; 
   9          
  10          //2019.03.30
  11          //sbit P10 = (u8)0x90^(u8)0;
  12          sbit P10 = (u8)0x90;
  13          sbit P37 = (u8)0xB0^(u8)7;
  14          
  15          //DS18B20程序=================================================
  16          void DS18B20_ReadByte(void)
  17          {
  18   1          BYTE i;
  19   1          u8 Wei;
  20   1          u8 Wei2;
  21   1          Read_18B20_Value=0;
  22   1          Read_18B20_Value2=0;
  23   1          //EA=0;
  24   1          for (i=0; i<(u8)8; i++)             //8位计数器
  25   1          {
  26   2              Read_18B20_Value >>= 1;
  27   2              Read_18B20_Value2 >>= 1;
  28   2              HeatingPlateSensor_Port = (bit)0;            //开始时间片
  29   2              ChamberOutletSensor_Port = (bit)0;            //开始时间片
  30   2              delay_us(2); 
  31   2              HeatingPlateSensor_Port = (bit)1;             //准备接收
  32   2              ChamberOutletSensor_Port =(bit)1;
  33   2              delay_us(2);              //接收延时
  34   2              Wei=HeatingPlateSensor_Port;
  35   2              Wei2=ChamberOutletSensor_Port;
  36   2              if (Wei==(u8)1)
  37   2              {
  38   3                Read_18B20_Value |= (uint8_t)0x80;        //读取数据
  39   3              }         
  40   2              if (Wei2==(u8)1) 
  41   2              {
  42   3                Read_18B20_Value2 |= (uint8_t)0x80;        //读取数据
  43   3              }
  44   2              delay_us(90);                  //等待60us时间片结束
  45   2          }
  46   1          //EA=1; 
  47   1      }
  48          
  49          void DS18B20_WriteByte(uint8_t dat)
  50          {
  51   1          BYTE  i;
  52   1          //EA=0;
C51 COMPILER V9.59.0.0   DS18B20                                                           04/11/2019 16:15:52 PAGE 2   

  53   1          for (i=0; i<(u8)8; i++)               //8位计数器
  54   1          {
  55   2              HeatingPlateSensor_Port = (bit)0;                        //开始时间片
  56   2              ChamberOutletSensor_Port=(bit)0;
  57   2              delay_us(2);                         //延时等待
  58   2              if((dat & (uint8_t)0x01)!=(u8)0)
  59   2              {
  60   3                 HeatingPlateSensor_Port = (bit)1;
  61   3                 ChamberOutletSensor_Port=(bit)1;
  62   3              }
  63   2              else
  64   2              {
  65   3                 HeatingPlateSensor_Port=(bit)0;
  66   3                 ChamberOutletSensor_Port=(bit)0;
  67   3              }
  68   2              delay_us(110);                         //等待时间片结束
  69   2              HeatingPlateSensor_Port = (bit)1;                     //恢复数据线
  70   2              ChamberOutletSensor_Port=(bit)1;
  71   2              delay_us(2);                         //延时等待
  72   2              dat >>= 1;                           //送出数据
  73   2          }
  74   1          //EA=1;
  75   1      }
  76          
  77          u8t DS18B20_CheckCrc(const u8t Cdata[], u8t nbrOfBytes, u8t checksum)
  78          //==============================================================================
  79          {
  80   1        u8t crc = 0;  
  81   1        u8t byteCtr;
  82   1        u8t bit8;
  83   1        u8t crc_1byte = 0;
  84   1        u8t ret=0;
  85   1        //calculates 8-Bit checksum with given polynomial
  86   1      //  crc = 0;
  87   1        for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
  88   1        { 
  89   2          crc ^= (Cdata[byteCtr]);
  90   2      //    crc_1byte ^= (u8t)0;
  91   2          for (bit8 = 0; bit8 < (u8)8; bit8++)
  92   2          {
  93   3            if (((crc_1byte^crc) & (u8t)0x01)!=(u8t)0)
  94   3            {
  95   4              crc_1byte ^= (u8t)0x18;
  96   4              crc_1byte >>= 1;
  97   4              crc_1byte |= (u8t)0x80;
  98   4            }
  99   3            else
 100   3            {
 101   4              crc_1byte >>= 1;
 102   4            }       
 103   3            crc >>= 1;  
 104   3          }
 105   2          //crc = crc ^ crc_1byte;
 106   2        }
 107   1        if(crc_1byte != checksum) 
 108   1        {
 109   2          ret= CHECKSUM_ERROR;
 110   2        }
 111   1        else 
 112   1        {
 113   2          ret=(u8t)0;
 114   2        }
C51 COMPILER V9.59.0.0   DS18B20                                                           04/11/2019 16:15:52 PAGE 3   

 115   1        return ret;
 116   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    341    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
