C51 COMPILER V9.59.0.0   WS_TASK_MANAGE                                                    04/19/2019 08:51:27 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE WS_TASK_MANAGE
OBJECT MODULE PLACED IN ..\OBJ\WS_Task_Manage.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\CODE\WS_Task_Manage.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE OR
                    -DER NOAREGS INCDIR(..\HARDWARE\ds1302;..\HARDWARE\ds18b20;..\HARDWARE\lcd;..\HARDWARE\RX8010;..\HARDWARE\sht21;..\HARDWA
                    -RE\sht31;..\HARDWARE\w25x;..\SYSTEM\delay;..\SYSTEM\stc_eeprom;..\SYSTEM;..\CODE) DEBUG PRINT(.\WS_Task_Manage.lst) TABS
                    -(2) OBJECT(..\OBJ\WS_Task_Manage.obj)

line level    source

   1          
   2          #include "WS_Task_Manage.h"
   3          
   4          #ifdef  TASK_32
   5          #define TASK_32
   6          //******************************************************************************
   7          //任务标志就绪表,最多支持32（0~31）个任务
   8          //******************************************************************************
   9          uint32_t WS_TaskIfg = 0;                                         //就绪标志位
  10          uint8_t WS_TaskState = 0;                                           //当前任务
  11          const uint32_t WS_TaskMap[32] =                                  //标志位操作表
  12          {
  13              0x00000001 , 0x00000002 , 0x00000004 , 0x00000008 , 0x00000010 , 0x00000020 , 0x00000040 , 0x00000080,
  14              0x00000100 , 0x00000200 , 0x00000400 , 0x00000800 , 0x00001000 , 0x00002000 , 0x00004000 , 0x00008000,
  15              0x00010000 , 0x00020000 , 0x00040000 , 0x00080000 , 0x00100000 , 0x00200000 , 0x00400000 , 0x00800000,
  16              0x01000000 , 0x02000000 , 0x04000000 , 0x08000000 , 0x10000000 , 0x20000000 , 0x40000000 , 0x80000000u
  17          };
  18          #endif
  19          
  20          #ifdef  TASK_16
              #define TASK_16
              //******************************************************************************
              //任务标志就绪表,最多支持16（0~15）个任务
              //******************************************************************************
              u16s_t WS_TaskIfg = 0;                                        //就绪标志位
              uint8_t WS_TaskState = 0;                                           //当前任务
              const u16s_t WS_TaskMap[16] =                                 //标志位操作表
              {
                  0x0001 , 0x0002 , 0x0004 , 0x0008 , 0x0010 , 0x0020 , 0x0040 , 0x0080,
                  0x0100 , 0x0200 , 0x0400 , 0x0800 , 0x1000 , 0x2000 , 0x4000 , 0x8000,
              };
              #endif
  33          
  34          #ifdef  TASK_8
              #define TASK_8
              //******************************************************************************
              //任务标志就绪表,最多支持8（0~7）个任务
              //******************************************************************************
              uint8_t WS_TaskIfg = 0;                                             //就绪标志位
              uint8_t WS_TaskState = 0;                                           //当前任务
              uint8_t const WS_TaskMap[8] =                                       //标志位操作表
              {
                  0x01 , 0x02 , 0x04 , 0x08 , 0x10 , 0x20 , 0x40 , 0x80,
              };
              #endif
  46          
  47          //任务在就绪表中就绪操作
  48          void WS_SetTaskIfg(uint8_t Setprio)
  49          {
  50   1          WS_TaskIfg |= WS_TaskMap[Setprio];
  51   1      }
  52          
C51 COMPILER V9.59.0.0   WS_TASK_MANAGE                                                    04/19/2019 08:51:27 PAGE 2   

  53          //任务在就绪表中删除操作
  54          void WS_DelTaskIfg(uint8_t DelPrio)
  55          {
  56   1          WS_TaskIfg &= ~WS_TaskMap[DelPrio];
  57   1      }
  58          
  59          //任务判断是否就绪操作
  60          uint8_t WS_TaskJudge(uint8_t AllPrio)
  61          {
  62   1        uint8_t res=0;
  63   1        if(((WS_TaskMap[AllPrio])&WS_TaskIfg)!=(uint32_t)0)
  64   1        {
  65   2          res=1;
  66   2        }
  67   1        else
  68   1        {
  69   2          res=0;
  70   2        }
  71   1        return res;
  72   1      }
  73          
  74          
  75          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    132    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    133       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
